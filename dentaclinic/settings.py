"""
Django settings for dentaclinic project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# IMPORTANT: Change this to a unique, unpredictable value in production!
# Use environment variables or Docker secrets for production.
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-i-6q_v8@3ky1r^dcy1sncam(7r69#+u)@a17mo5vtnqt2msa*l')

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG to '0' or 'False' in production environments.
DEBUG = os.environ.get('DEBUG', '1') == '1'

# ALLOWED_HOSTS is crucial for security in production.
# It should list the domain names or IP addresses where your Django app is served.
# In development with Docker, 'localhost' and '127.0.0.1' are common.
# Add the service name 'web' for internal Docker network communication if needed by other services.
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')
if DEBUG:
    ALLOWED_HOSTS += ['web'] # Allow internal Docker communication in debug

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    'corsheaders', 
    # Local apps
    'appointments.apps.AppointmentsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware', 
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS Settings - Ensure these are at the top level of the file (no indentation)
# These settings control which origins are allowed to make cross-origin requests.
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Allow requests from your frontend on localhost port 3000
    "http://127.0.0.1:3000", # Also include the IP address for localhost
    # Add any other origins where your frontend might be served (e.g., production domain)
]

# If you need to allow credentials (like cookies for session authentication),
# you MUST set this to True. This is required for Django's session auth with a separate frontend.
CORS_ALLOW_CREDENTIALS = True

# In development, you *could* use CORS_ALLOW_ALL_ORIGINS = True,
# but it's less secure and not recommended for production.
# If using CORS_ALLOW_ALL_ORIGINS = True, you should comment out CORS_ALLOWED_ORIGINS.
# CORS_ALLOW_ALL_ORIGINS = True


ROOT_URLCONF = 'dentaclinic.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dentaclinic.wsgi.application'
ASGI_APPLICATION = 'dentaclinic.asgi.application' # Ensure ASGI is also configured


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
# Using dj_database_url to parse DATABASE_URL environment variable
DATABASES = {
    'default': dj_database_url.config(
        # Use environment variables for database connection details
        default=os.environ.get('DATABASE_URL', 'postgres://dental:dental@db:5432/dental_db'),
        conn_max_age=600
    )
}

# If you had a direct SQLite configuration, remove or comment it out:
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # Collect static files here in production
STATICFILES_DIRS = [
    BASE_DIR / "static", # Look for static files here in development
]

# Media files (User uploaded content)
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media' # Store media files here


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'appointments.CustomUser'

# REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        # Consider adding TokenAuthentication or JWTAuthentication for API-only clients
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        # You have custom permission classes in appointments.views.clinic_views etc.
        # These will override the default per ViewSet.
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# Login/Logout URLs - Used by Django's auth views and decorators
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home' # Or a dashboard view name after successful login
LOGOUT_REDIRECT_URL = 'login'

# CSRF Settings
# Ensure CSRF_COOKIE_SECURE is True in production when using HTTPS
# CSRF_COOKIE_SECURE = True
# Ensure SESSION_COOKIE_SECURE is True in production when using HTTPS
# SESSION_COOKIE_SECURE = True
# Ensure CSRF_COOKIE_SAMESITE is set appropriately (e.g., 'Lax' or 'Strict')
# CSRF_COOKIE_SAMESITE = 'Lax'
# Ensure SESSION_COOKIE_SAMESITE is set appropriately
# SESSION_COOKIE_SAMESITE = 'Lax'

