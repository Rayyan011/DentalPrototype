services:
  db:
    image: postgres:13-alpine # Using alpine for a smaller image
    container_name: dental_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persist database data
    environment:
      # These should be set in your .env file
      - POSTGRES_DB=${POSTGRES_DB:-dentalclinic_db}
      - POSTGRES_USER=${POSTGRES_USER:-django_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-yoursecurepassword}
    # ports: # Only uncomment for local debugging if direct DB access is needed
      # - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-django_user} -d ${POSTGRES_DB:-dentalclinic_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dental_network

  backend:
    build:
      context: . # Build from the Dockerfile in the current directory
      dockerfile: Dockerfile
    container_name: dental_backend
    command: gunicorn --workers 3 --bind 0.0.0.0:8000 dentaclinic.wsgi:application # Run Gunicorn
    volumes:
      # In development, mount the current directory to see code changes without rebuilding.
      # For production, remove this line to use the code baked into the image.
      - .:/app
      #- ./nginx.conf:/etc/nginx/conf.d/default.conf:ro 
      - static_volume:/app/staticfiles # Shared volume for static files
      - media_volume:/app/mediafiles   # Shared volume for media files
    # ports: # Not needed as Nginx is the entry point
      # - "8000:8000"
    environment:
      # These should be set in your .env file
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DJANGO_DEBUG:-0} # 0 for False, 1 for True
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-localhost 127.0.0.1 backend frontend}
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DATABASE_DB=${POSTGRES_DB:-dentalclinic_db}
      - DATABASE_USER=${POSTGRES_USER:-django_user}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:-yoursecurepassword}
      - DATABASE_HOST=db # Service name of the PostgreSQL container
      - DATABASE_PORT=5432
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be ready
    networks:
      - dental_network

  frontend: # This is the Nginx service
    build:
      context: .
      dockerfile: Dockerfile.nginx # Use the Nginx Dockerfile
    container_name: dental_nginx_frontend
    ports:
      - "8080:80"   # Map host port 80 to container port 80 (HTTP)
      # - "443:443" # Uncomment for HTTPS in production
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro # Mount your Nginx config (read-only)
      - static_volume:/app/staticfiles:ro # Mount static files volume (read-only for Nginx)
      - media_volume:/app/mediafiles:ro   # Mount media files volume (read-only for Nginx)
      # For HTTPS (example, manage certs appropriately):
      # - ./certs:/etc/nginx/certs:ro
    depends_on:
      - backend # Nginx depends on the backend being available
    networks:
      - dental_network

volumes:
  postgres_data: # Persists PostgreSQL data
  static_volume: # For static files generated by 'collectstatic'
  media_volume:  # For user-uploaded media files

networks:
  dental_network: # Custom bridge network for services to communicate
    driver: bridge
